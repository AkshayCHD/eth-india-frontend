[{"/Users/akshay/Programs/ethereum/react-snake/src/index.js":"1","/Users/akshay/Programs/ethereum/react-snake/src/App.js":"2","/Users/akshay/Programs/ethereum/react-snake/src/reportWebVitals.js":"3","/Users/akshay/Programs/ethereum/react-snake/src/components/Snake/Snake.js":"4","/Users/akshay/Programs/ethereum/react-snake/src/components/UserIdDialog/UserIdDialog.jsx":"5"},{"size":500,"mtime":1670045109550,"results":"6","hashOfConfig":"7"},{"size":2583,"mtime":1670103420387,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1670045109550,"results":"9","hashOfConfig":"7"},{"size":10790,"mtime":1670103420387,"results":"10","hashOfConfig":"7"},{"size":598,"mtime":1670089362446,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1exufma",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/akshay/Programs/ethereum/react-snake/src/index.js",[],["25","26"],"/Users/akshay/Programs/ethereum/react-snake/src/App.js",["27","28","29","30"],"import React, { useState, useEffect } from \"react\";\nimport Snake from \"./components/Snake/Snake\";\nimport UserIdDialog from \"./components/UserIdDialog/UserIdDialog\";\nimport axios from \"axios\";\nimport \"./App.css\";\n// import { createClient } from \"urql\";\n\n// const APIURL = \"https://api.thegraph.com/subgraphs/name/anubhavitis/ethindia22\";\n\n// const transfersQuery = `\n//   query {\n//     transfers(first: 10){\n//       id\n//       tokenId\n//       from\n//     }\n//   }\n// `;\n// const users = [\n//   {\n//     id: 1,\n//     name: \"user1\",\n//     publicKey: \"0xe196C91ABFb4DFba4c57704C530Be52C3c3ddD9B\",\n//     level: 1,\n//   },\n//   {\n//     id: 2,\n//     name: \"user2\",\n//     publicKey: \"0xB63Cf430fe1Ca8d80dff1F714B71fD688e8F5F6d\",\n//     level: 2,\n//   },\n//   {\n//     id: 3,\n//     name: \"user3\",\n//     publicKey: \"0xb360ffa8E8a35f99bB3392F6F79d9b1116ddF8D8\",\n//     level: 1,\n//   },\n// ];\n\n// const client = createClient({\n//   url: APIURL,\n// });\nconst App = () => {\n  const [userId, setUserId] = useState();\n  const [snakeArray, setSnakeArray] = useState([1, 2, 3, 4]);\n  const [startGame, setStartGame] = useState(false);\n  const [slowSpeed, setSlowSpeed] = useState(false);\n  const [shortSnake, setShortSnake] = useState(false);\n  const [color, setColor] = useState(\"default\");\n  const fetchNftConfig = async (userId) => {\n    // const data = await client.query(transfersQuery).toPromise();\n    // const user = users.find((user) => user.id === parseInt(userId))\n    // console.log(data);\n    const response = await axios.get(\n      `http://localhost:3030/get-user-data?id=${userId}`\n    );\n    const nftConfigs = response.data.userNfts;\n    const speedNft = nftConfigs.find((nft) => nft.name === \"speed\");\n    // const colorNft = nftConfigs.find((nft) => nft.name === \"color\");\n    const lengthNft = nftConfigs.find((nft) => nft.name === \"length\");\n\n    console.log(speedNft);\n    if (speedNft) {\n      setSlowSpeed(true);\n    }\n    if (lengthNft) {\n      setShortSnake(true);\n    }\n    setStartGame(true);\n  };\n  useEffect(() => {\n    console.log(userId);\n    // fetchNftConfig(userId);\n\n    setStartGame(true);\n  }, [userId]);\n  console.log(userId);\n  return userId ? (\n    startGame ? (\n      <div className=\"App\">\n        <Snake\n          color1=\"#248ec2\"\n          color2=\"#f0cb16\"\n          backgroundColor=\"#3F56AF\"\n          slowSpeed={slowSpeed}\n          color={color}\n          shortSnake={shortSnake}\n        />\n      </div>\n    ) : (\n      <div></div>\n    )\n  ) : (\n    <div>\n      <UserIdDialog setUserId={setUserId} />\n    </div>\n  );\n};\n\nexport default App;\n","/Users/akshay/Programs/ethereum/react-snake/src/reportWebVitals.js",[],"/Users/akshay/Programs/ethereum/react-snake/src/components/Snake/Snake.js",["31","32"],"import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport axios from 'axios';\nimport './Snake.css';\n\nconst Snake = (props) => {\n    console.log(\"Snake reloaded\")\n    let part = [4, 3, 2, 1];\n    let speed = 50;\n    if(props.shortSnake) {\n        part = [1];\n    }\n    if(props.slowSpeed) {\n        speed = 250;\n    }\n    const [dim, setDim] = useState(0);\n    const [chunk, setChunk] = useState(0);\n    const [direction, setDirection] = useState('right');\n    const [fruit, setFruit] = useState(26);\n    const [points, setPoints] = useState(0);\n    const [game, setGame] = useState(false);\n    const speedRef = useRef(speed);\n    let width;\n    \n\n    const [snake, setSnake] = useState([\n        {\n            direction: 'right', \n            part: part\n        }\n    ]);\n    const reset = () => {\n        speedRef.current = 100;\n        setPoints(0)\n        setDirection('right')\n        setSnake ([{\n            direction: 'right', \n            part: [186, 185, 184, 183]\n        }])\n        setGame(false)\n    }\n\n    const pieces = () => {//functionally label snake pieces (bang) and return\n        let arr = [];\n        for (let i = 0; i < 400; i++) {\n            let addToArr = false;\n            let j = 0;\n            while (j < snake.length) {\n                if (snake[j].part.indexOf(i) >= 0) {\n                    addToArr = true\n                    break;\n                 } else {\n                    addToArr = false\n                 }\n                j++\n            }\n            addToArr ? \n                arr.push('bang') : \n                    i === fruit ? arr.push('fruit') :\n                        arr.push('')\n        }\n        return arr\n    }\n\n    //handle direction changes\n    const turn = useCallback(\n        (dir, opp) => {\n            let tempSnake = [...snake];\n            console.log(snake[0].part)\n            if (snake[0].part.length > 0 && direction !== opp && direction !== dir) {\n                setDirection(dir)\n                tempSnake.unshift({\n                    direction: dir,\n                    part: []\n                })\n                setSnake(tempSnake)\n            }\n        }, [snake, direction]\n    )\n\n    useEffect(() => {\n        //determine relative dimensions of game portal\n        width = window.innerWidth;\n        if (width >= 800) {\n            setDim(width * .35)\n        } else if (width < 800) {\n            setDim(width * .9);\n        }\n        setChunk(dim / 20)\n\n        //points and get longer after eating\n        if (snake[0].part[0] === fruit) {\n            setPoints(points + 1)\n            let sneak = [...snake];\n            let firstSection = sneak[0]\n            if (firstSection.direction === 'up') {\n                let y = firstSection.part[0] - 20;\n                if (y < 0) {\n                    firstSection.part.unshift(y + 400);\n                } else {\n                    firstSection.part.unshift(y)\n                }\n            } else if (firstSection.direction === 'right') {\n                let y = firstSection.part[0] + 1;\n                if (y % 20 === 0) {\n                    firstSection.part.unshift(y + - 20);\n                } else {\n                    firstSection.part.unshift(y)\n                }\n            } else if (firstSection.direction === 'down') {\n                let y = firstSection.part[0] + 20;\n                if (y >= 400) {\n                    firstSection.part.unshift(y - 400);\n                } else {\n                    firstSection.part.unshift(y)\n                }\n            } else if (firstSection.direction === 'left') {\n                let y = firstSection.part[0] - 1;\n                if (y % 20 === 19) {\n                    firstSection.part.unshift(y + 20);\n                } else {\n                    firstSection.part.unshift(y)\n                }\n            }\n            speedRef.current = speedRef.current - 2\n            setSnake(sneak)\n            setFruit(Math.floor(Math.random() * Math.floor(400)))\n        }\n\n        //gameover if you eat your tail\n        let totalArr = [];\n        for (let k = 0; k < snake.length; k++) {\n            totalArr = [...totalArr, ...snake[k].part]\n        }\n        let head = snake[0].part[0];\n        totalArr.filter(item => item === head).length >= 2 && setGame(true)\n\n        if (!game) {//if GAMEOVER pause events\n\n            //listen for directions and update snake instructions accordingly\n            const handleKeydown = (e) => {\n                //let tempSnake: any = [...snake];\n                switch (e.code) {\n                    case 'ArrowUp':\n                        e.preventDefault();\n                        turn('up', 'down')\n                        break;\n                    case 'ArrowRight':\n                        e.preventDefault();\n                        turn('right', 'left')\n                        break;\n                    case 'ArrowDown':\n                        e.preventDefault();\n                        turn('down', 'up')\n                        break;\n                    case 'ArrowLeft':\n                        e.preventDefault();\n                        turn('left', 'right')\n                        break;\n                    default:\n                }\n            }\n            document.addEventListener('keydown', handleKeydown)\n\n            //event interval\n            const interval = setInterval(() => {\n\n                //handle snake piece movement\n                let dupSneak = [...snake];\n\n                for (let i = (snake.length - 1); i > 0; i--) {//increment through current snake and reduce to head direction\n                    if (dupSneak[i].part.length !== 0) {\n                        let next = dupSneak[i - 1];\n                        let chunk = dupSneak[i].part.shift();\n                        next.part.push(chunk)\n                    } else {\n                        dupSneak.pop()\n                    }\n                }\n\n                //perform movement changes to each chunk\n                let sneak = dupSneak;\n                sneak.map((section) => {\n                    if (section.direction === 'right') {\n                        section.part.map((x, i) => {\n                            let y = x + 1;\n                            if (y % 20 === 0) {\n                                return section.part[i] = y - 20;\n                            } else {\n                                return section.part[i] = y\n                            }\n                        })\n                    } else if (section.direction === 'up') {\n                        section.part.map((x, i) => {\n                            let y = x - 20;\n                            if (y < 0) {\n                                return section.part[i] = y + 400;\n                            } else {\n                                return section.part[i] = y\n                            }\n                        })\n                    } else if (section.direction === 'left') {\n                        section.part.map((x, i) => {\n                            let y = x - 1;\n                            if (y % 20 === 19) {\n                                return section.part[i] = y + 20;\n                            } else {\n                                return section.part[i] = y\n                            }\n                        })\n                    } else if (section.direction === 'down') {\n                        section.part.map((x, i) => {\n                            let y = x + 20;\n                            if (y >= 400) {\n                                return section.part[i] = y - 400;\n                            } else {\n                                return section.part[i] = y\n                            }\n                        })\n                    }\n                    return ''\n                })\n                setSnake(sneak)\n\n            }, speedRef.current);\n\n            //remove interval and listeners\n            return () => {\n                clearInterval(interval)\n                document.removeEventListener('keydown', handleKeydown)\n            };\n        }\n        console.log(snake)\n    }, [turn, width, dim, chunk, snake, direction, points, fruit, game])\n\n    return (\n        <div className=\"snake-container\" id=\"snake-container\">\n            <div   \n                className=\"game-border\"\n                style={{width: dim, height: dim, backgroundColor: props.backgroundColor}}\n                >\n                    {\n                        pieces().map((piece, i) => {\n                            return <div\n                                key={'piece' + i}\n                                style={piece === 'bang' ? \n                                        {width: chunk, height: chunk, backgroundColor: props.color1} : \n                                            piece === 'fruit' ?\n                                                {width: chunk, height: chunk, backgroundColor: props.color2, borderRadius:\"2rem\"} :\n                                                    {width: chunk, height: chunk}}\n                                >\n                            </div>\n                        })\n                    }\n                    {\n                        game && <div \n                            className=\"game-splash\"\n                            style={{height: dim}}\n                            >\n                            <div>Game Over!</div>\n                            <button\n                                onClick={() => reset()}\n                                >\n                                    Play Again\n                            </button>\n                        </div>\n                    }\n            </div>\n            <div \n                className=\"point-bar\"\n                style={{width: dim}}\n                >\n                    <div style={{color: props.color1}}>Score: {points}</div>\n            </div>\n            {\n                width <= 1024 && <div \n                className=\"snake-mobile-buttons\" \n                style={{width: dim, margin: 'auto'}}\n                >\n                <div>\n                    <button\n                        onClick={() => turn('up', 'down')}\n                        >&#8593;</button>\n                </div>\n                <div>\n                    <button\n                        onClick={() => turn('left', 'right')}\n                        >&#8592;</button>\n                    <button\n                        onClick={() => turn('right', 'left')}\n                        >&#8594;</button>\n                </div>\n                <div>\n                    <button\n                        onClick={() => turn('down', 'up')}\n                        >&#8595;</button>\n                </div>\n            </div>\n            }\n        </div>\n    )\n}\n\nexport default Snake","/Users/akshay/Programs/ethereum/react-snake/src/components/UserIdDialog/UserIdDialog.jsx",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":45,"column":10,"nodeType":"39","messageId":"40","endLine":45,"endColumn":20},{"ruleId":"37","severity":1,"message":"41","line":45,"column":22,"nodeType":"39","messageId":"40","endLine":45,"endColumn":35},{"ruleId":"37","severity":1,"message":"42","line":49,"column":17,"nodeType":"39","messageId":"40","endLine":49,"endColumn":25},{"ruleId":"37","severity":1,"message":"43","line":50,"column":9,"nodeType":"39","messageId":"40","endLine":50,"endColumn":23},{"ruleId":"37","severity":1,"message":"44","line":2,"column":8,"nodeType":"39","messageId":"40","endLine":2,"endColumn":13},{"ruleId":"45","severity":1,"message":"46","line":82,"column":17,"nodeType":"47","endLine":82,"endColumn":34},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'snakeArray' is assigned a value but never used.","Identifier","unusedVar","'setSnakeArray' is assigned a value but never used.","'setColor' is assigned a value but never used.","'fetchNftConfig' is assigned a value but never used.","'axios' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'width' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","no-global-assign","no-unsafe-negation"]